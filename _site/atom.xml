<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Thoughts on Design</title>
 <link href="http://cpeak.github.com/atom.xml" rel="self"/>
 <link href="http://cpeak.github.com"/>
 <updated>2012-04-02T22:54:06-05:00</updated>
 <id>http://cpeak.github.com</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Uncle Bob</title>
   <link href="http://cpeak.github.com/blog/2012/03/30/uncle-bob"/>
   <updated>2012-03-30T00:00:00-05:00</updated>
   <id>http://cpeak.github.com/blog/2012/03/30/uncle-bob</id>
   <content type="html">&lt;h2&gt;Uncle Bob&lt;/h2&gt;&lt;img src='/images/uncle_bob.png' alt='Uncle Bob' /&gt;&lt;p&gt;Another great talk by Uncle Bob on 'The Liskov Substitution Principle'&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Z Index And Positioning</title>
   <link href="http://cpeak.github.com/blog/2012/03/16/Z-Index-and-Positioning"/>
   <updated>2012-03-16T00:00:00-05:00</updated>
   <id>http://cpeak.github.com/blog/2012/03/16/Z-Index-and-Positioning</id>
   <content type="html">&lt;article&gt;
  &lt;h2&gt;Sorting out Position &amp;amp; Z-Index Properties&lt;/h2&gt;
  &lt;p&gt;One concept of web design that can trip up beginners and less-experienced developers is the &lt;code&gt;position&lt;/code&gt; &amp;amp; &lt;code&gt;z-index&lt;/code&gt; properties.  CSS gives the designer flexibility to move elements around the page freely, and not just in two dimensions.  Using these two properties you can stack and layer divs so they flow above, below, and through each other. However when elements are positioned differently they are taken out of the normal flow of the document. Lets take a look&lt;/p&gt;
  &lt;h3&gt;Position&lt;/h3&gt;
  &lt;p&gt;The &lt;code&gt;position&lt;/code&gt; property allows a div to break free from the normal flow of the layout. Typically elements are rendered in order and laid out according to their float &amp;amp; margin properties.  Using a &lt;code&gt;fixed&lt;/code&gt; or &lt;code&gt;absolute&lt;/code&gt; position property, the element will ignore the normal document flow and behave depending on a different set of rules.&lt;/p&gt;
  &lt;h3&gt;Position: Fixed&lt;/h3&gt;
  &lt;p&gt;A div that is set to &lt;code&gt;position:fixed&lt;/code&gt; will ignore the entire document flow, positioning itself only in relation to the view screen.  In other words it will remain in a fixed spot in the browser window irregardless of where the user scrolls to. How do we define where in the browser window the element will display? To do this we have to set the &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; properties in our CSS. For &lt;code&gt;&amp;lt;div id=&quot;foo&quot;&amp;gt;&lt;/code&gt; we can set &lt;code&gt;top: 10px;&lt;/code&gt; and &lt;code&gt;left: 50px;&lt;/code&gt; that way &lt;code&gt;foo&lt;/code&gt; will display 10px from the top and 50px from the left, creating a static div that will remain in that location at all times. This can be advantageous for example if we have a page with a lot of text that the user must scroll through - when the user reaches the bottom the navigation is still at the top left, so they dont have to scroll all the way back to the top to move to a new page.&lt;/p&gt;
  &lt;h3&gt;Position: Absolute&lt;/h3&gt;
  &lt;p&gt;Here is where it gets a little tricky. Lets set &lt;code&gt;foo&lt;/code&gt; to &lt;code&gt;position: absolute;&lt;/code&gt;. Without changing anything else the div may not move at all.  A div with an &lt;code&gt;absolute&lt;/code&gt; positioning will ignore the document flow, and position itself based on its &lt;em&gt;parent&lt;/em&gt; div.  If div is sitting within the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; section it will float in the top left just as before.  However, if we move it into another section of the page it will relate itself to that particular parent element &lt;em&gt;only if that parent element has its position set to &lt;code&gt;relative&lt;/code&gt;.&lt;/em&gt; Wait a second, &lt;code&gt;relative&lt;/code&gt;?  This is where a lot of people get confused. Setting a div to &lt;code&gt;relative&lt;/code&gt; tells all its child elements to use itself to orient themselves when they are positioned absolutely. If you dont define the parent element the child will find the first container above it set to &lt;code&gt;relative&lt;/code&gt; and position itself according to that. If you dont set your &lt;code&gt;absolute&lt;/code&gt; and &lt;code&gt;relative&lt;/code&gt; tags correctly, some strange thing will happen.&lt;/p&gt;
  &lt;h3&gt;Z-Index&lt;/h3&gt;
  &lt;p&gt;Just to further the complexity, lets take a look, at &lt;code&gt;z-index&lt;/code&gt;.  This property allows us to stack our elements in 3 dimensions, just like an animator with multiple cells creating a layered effect, we can leverage it to create some interesting designs. If left un-defined any element will have a default &lt;code&gt;z-index&lt;/code&gt; of 0. A div set to 10 will render above, and -10 will render below.  Combine this with the &lt;code&gt;position&lt;/code&gt; property and your design is infinitely more flexible.&lt;/p&gt;
  &lt;h3&gt;Bring it all together&lt;/h3&gt;
  &lt;p&gt;You can go even &lt;em&gt;further&lt;/em&gt; down the rabbit hole by throwing JQuery into the mix, dynamically changing &lt;code&gt;z-index&lt;/code&gt; properties on the fly.  Just remember these are garnishes, if you start moving things around and re-stacking tons of elements things will probably start mis-behaving, or worse confuse your visitors. These are tools any good developer should have in their bag, but remember to &lt;em&gt;use the correct tool for the job&lt;/em&gt;.&lt;/p&gt;
&lt;/article&gt;</content>
 </entry>
 
 <entry>
   <title>Music Theory</title>
   <link href="http://cpeak.github.com/blog/2012/03/09/Music-Theory"/>
   <updated>2012-03-09T00:00:00-06:00</updated>
   <id>http://cpeak.github.com/blog/2012/03/09/Music-Theory</id>
   <content type="html">&lt;article&gt;
  &lt;h2&gt;Music Theory and Web Design?&lt;/h2&gt;
  &lt;p&gt;In my last post I discussed some practices I have been learning in order to clean up my HTML5 and CSS code on the back end.  This week I have been working on how to improve my typography, design, and layout using a grid based approach aided by the modular scale.&lt;/p&gt;
  &lt;h3&gt;Modular Scale&lt;/h3&gt;
  &lt;p&gt;The modular scale is a mathematical approach to layout design using ratios that are found in music. Thankfully my wife was a voice major in college so when I asked her about scales about it she gave me a long lecture on how they can evoke certain feelings or '&lt;em&gt;ethos&lt;/em&gt;'.  If your goal is a more upbeat design then you may want to use a perfect-fourth which is a happier scale.  Conversely if you want a more serious and somber design, something like a minor-sixth might suit your needs. Now, how in the world do we apply music theory to web design? A scale is all based on the root note, whatever it may be.&lt;/p&gt;
  &lt;p&gt;We take the ratios found in the scales and apply them to our root note or in our case, our base text size. Lets say our goal is to have a base text size of 16px - using a perfect fourth scale you get 16, 21, 28, 38, 50, 67, and so on. Now we can apply this to our design - our H1 tag will be at 67px, H2 50px, etc, back down to our root 16px text size. Not only do we use this for picking out our font-size's we can also use these numbers in our grid spacing.&lt;/p&gt;
  &lt;h3&gt;Grid Based Layout&lt;/h3&gt;
  &lt;p&gt;As a carpenter would you build a house without a level?  Sure you could frame the house and get everything together, but it wouldn't be anywhere near as good as it should be.  &lt;a href='http://www.smashingmagazine.com/2007/04/14/designing-with-grid-based-approach/'&gt;Smashing Magazine says it best&lt;/a&gt;: &lt;em&gt;Your goal is to establish a consistent, logical screen layout, one that allows you to &amp;quot;plug in&amp;quot; text and graphics without having to stop and rethink your basic design approach on each new page.&lt;/em&gt;&lt;/p&gt;
  &lt;p&gt;Using the &lt;a href='http://www.hashgrid.com'&gt;#Grid&lt;/a&gt; JavaScript plugin I can toggle an overlay onto a site and see how the modules line up on the grid based layout. I re-visited my Tribune Article redesign project and used the perfect-fourth scale to determine column, gutter, and body width.  I knew I wanted a few more columns than usual in my layout due to the complexity of a news site and I was also limited in screen size to roughly 1000px.  Looking at our scale and crunching some numbers, I came up with a layout of 6 columns at 120px with gutters of 38px.  This gave us a total width of 948px.&lt;/p&gt;
  &lt;img src='/images/grid_layout.png' alt='Grid Based Layout' /&gt;
  &lt;p&gt;As you can see in the photo above, the main article uses roughly 3 columns, then a gutter, then the sidebar uses precisely 2. Now the layout has a much better and more consistent flow. The photo and caption sit nicely in the second and third column, and to create some tension I made sure the article didn't flow all the way over to the edge of the 3rd column.&lt;/p&gt;
  &lt;p&gt;Just remember that these are guidelines and can be broken when necessary. Bending or breaking these rules create tension and unique design... just be careful when you stray from your scales .&lt;/p&gt;
&lt;/article&gt;</content>
 </entry>
 
 <entry>
   <title>Breaking The Habit</title>
   <link href="http://cpeak.github.com/blog/2012/03/02/Breaking-the-habit"/>
   <updated>2012-03-02T00:00:00-06:00</updated>
   <id>http://cpeak.github.com/blog/2012/03/02/Breaking-the-habit</id>
   <content type="html">&lt;h2&gt;Breaking The Habit&lt;/h2&gt;&lt;p&gt;Over the past two weeks I have done a lot of reading while diving back into HTML &amp;amp; CSS coding and reviewing the work habits that got me here. Previously I felt my code was strutting like John Travolta in &lt;em&gt;Saturday Night Fever&lt;/em&gt;, but the more I learn it's looking more like Disco Stu.  I am largely self-taught, which in of itself is not a bad thing, but over the years I have developed some bad habits and peculiar idiosyncrasies. Now that I am doing this for a living it's time to break those habits and lay a solid foundation to grow as a professional developer.&lt;/p&gt;&lt;p&gt;Like a lot websites out there my old projects were a big jumble of div IDs and classes using a pseudo-semantic formula that seemed to work well for me at the time. Typical sites would have a &amp;lt;div id=&quot;header&quot;&amp;gt;, a &amp;lt;div id=&quot;nav&quot;&amp;gt;, a few layout divs, some content classes and a &amp;lt;div id=&quot;footer&quot;&amp;gt;, however I never set my naming conventions in stone. Now HTML5 has introduced some new elements that will help make markup and structure more concise and descriptive - better for maintenance, better for human eyes, and better for accessibility.&lt;/p&gt;&lt;p&gt;In my last job I would occasionally get web re-design projects put on my plate, and as a developer there are few things scarier than having to pull the lid off an older website, invariably written by the client's teenage neighbor, and see how utterly terribly it was built in the first place. Markup filled with unconventional naming practices, little or no documentation, or even (*shuddering*) table-based layouts. So lets take a look at some things that we can do to break these habits so we can produce well written, clean, semantic, thoughtful, and efficient code. Now, where do we begin?&lt;/p&gt;&lt;h3&gt;Better semantics in HTML5 &lt;/h3&gt;&lt;p&gt;One of the main goals for the new HTML5 spec was to remove ambiguity by adding concise elements. Some of the bigger additions are: &amp;lt;header&amp;gt; &amp;lt;nav&amp;gt; &amp;lt;footer&amp;gt; &amp;lt;article&amp;gt; &amp;lt;aside&amp;gt; and &amp;lt;section&amp;gt;. I could easily fall down the rabbit hole explaining all these, but there are &lt;a href='http://html5doctor.com/'&gt;plenty of other resources&lt;/a&gt; explaining each one in detail. By using these tags as our base skeleton for a site we now have a solid foundation to build from:&lt;/p&gt;&lt;code&gt;
    &amp;lt;header&amp;gt; &lt;br /&gt;
    &amp;emsp; &amp;lt;nav&amp;gt; &lt;br /&gt;
    &amp;emsp; &amp;lt;section id=&quot;main_content&quot;&amp;gt; &lt;br /&gt;
    &amp;emsp; &amp;emsp; &amp;lt;article&amp;gt; &lt;br /&gt;
    &amp;emsp; &amp;emsp; &amp;lt;article&amp;gt; &lt;br /&gt;
    &amp;emsp; &amp;emsp; &amp;lt;article&amp;gt; &lt;br /&gt;
    &amp;emsp; &amp;lt;/section&amp;gt; &lt;br /&gt;
    &amp;lt;footer&amp;gt; &lt;br /&gt;
  &lt;/code&gt;&lt;p&gt;This structure makes our site much easier to build on, adjust, maintain, and understand - not only for us as developers but screen-readers and other accessibility tools, as well as search-engines. Now screen readers will now have a very easy time determining where the primary navigation, main content, or other sections of the page are. For example before, &amp;lt;div id=&quot;menu&quot;&amp;gt; could either be the site's primary navigation or it could be an actual menu for a restaurant.  With semantic markup we now know that &amp;lt;nav&amp;gt; is meant for site navigation, avoiding any ambiguity between nav and menu.&lt;/p&gt;&lt;p&gt;We can also tell where the meat of the site now lies, finding it in the new &amp;lt;article&amp;gt; tag. The article tags primary purpose is to exist as a self-contained entity of the site - a blog or forum post, newspaper article, widget, or &quot;&lt;em&gt;any other independent item of content&lt;/em&gt;&quot; - &lt;a href='http://dev.w3.org/html5/spec/Overview.html#the-article-element'&gt;per the W3C spec&lt;/a&gt;.  Articles can have their own &amp;lt;header&amp;gt; and  &amp;lt;footer&amp;gt; sections of their own, as long as they are all related to the article itself. Just remember the word &lt;em&gt;independent&lt;/em&gt;.  Does the &amp;lt;article&amp;gt; make sense on it's own?  Using these new tags we get to trim some &amp;lt;div&amp;gt;'s from our site, getting us more separation from our CSS.&lt;/p&gt;&lt;p&gt;You may be saying to yourself: &amp;quot;Ah hah! What about our CSS?&amp;quot;&lt;/p&gt;&lt;h3&gt;SMACSS&lt;/h3&gt;&lt;p&gt;&lt;a href='http://smacss.com/'&gt;Scalable and Modular Architecture for CSS&lt;/a&gt; (SMACSS) is a new way to look at organizing your CSS code.  By categorizing your CSS rules you can start to tame the wild beast that some of your more complex projects may have become (or preventing new projects from getting out of hand). SMACSS doesn't come down off the mount declaring what you should or shouldn't do, but it does help you identify some areas where you can improve your organization. They recommend you break your rules into 5 categories: Base, Layout, Module, State, and Theme.  &lt;span class='quote'&gt;&amp;quot;By categorizing CSS rules, we begin to see patterns and can define better practices around each of these patterns.&amp;quot; - Jonathan Snook&lt;/span&gt; &lt;/p&gt;&lt;p&gt;By identifying patterns we can make it more efficient by streamlining the code. SMACSS also allows us to &lt;a href='http://smacss.com/book/applicability'&gt;reduce our depth of applicability&lt;/a&gt;, thus reducing our dependency on the HTML structure. When we are less dependent on the actual HTML structure, the design is much more fluid and can be easily fit to various layouts and screen sizes with little extra effort.&lt;/p&gt;&lt;h3&gt;Trimming the fat&lt;/h3&gt;&lt;p&gt;Its easy to have CSS files get unruly and out of hand.  A lot of times there are some areas where we can trim some fat in our code, increasing efficiency while reducing load times.  In some instances multiple properties can be combined into one valid declaration.  Lets look at a very common declaration - 4 rules that apply to the &amp;lt;p&amp;gt; text for this blog: &lt;/p&gt;&lt;code&gt;
    font-family: &quot;prenton&quot;;&lt;br /&gt;
    font-size: 17px; &lt;br /&gt;
    font-weight: 300; &lt;br /&gt;
    line-height: 1.4em;*/
  &lt;/code&gt;&lt;p&gt;That can be re-written down to one property call - font: &lt;i&gt;weight size/line-height family&lt;/i&gt;&lt;/p&gt;&lt;section class='code_example'&gt;
  &lt;code&gt;font: 300 17px/1.4em &quot;prenton&quot;;&lt;/code&gt;
  &lt;/section&gt;&lt;p&gt;The same practice can be applied to many different declarations that use multiple lines for the same element &lt;em&gt;(e.g. Margin &amp;amp; Padding)&lt;/em&gt;. Similarly I tend to use one line if there are only one or two properties in the same declaration:&lt;/p&gt;&lt;section class='code_example'&gt;
  &lt;code&gt;.left { float: left; padding-right: 10px; }&lt;/code&gt;
  &lt;/section&gt;&lt;p&gt;Much better, right? Formatting your CSS sheets does come down to personal preference, but SMACSS gives you a great framework to build on, or at least give you some ideas help develop your own system.&lt;/p&gt;&lt;h3&gt;Getting in shape&lt;/h3&gt;&lt;p&gt;What else can we do to whip our CSS into shape? I've seen some blogs and articles suggesting that you have all property declarations on the same line, removing extra white space &amp;amp; line breaks, and even going so far as to removing comments from production files to save weight (*face palm*).  I understand the sentiment, but it seems to me like re-arranging the deck chairs on the Titanic - sure it gives you something to do but it doesn't achieve anything.&lt;/p&gt;&lt;p&gt;By tightening the belt that much you are actually making things worse - you are breaking down readability and maintainability of the site.  What happens in a year from now when the client changes developers and want something changed on the site? As a developer,  which would you rather see? A CSS file full of entries like this:&lt;/p&gt;&lt;code&gt;hr { background:#CF7400;margin:25px0;text-align:left;padding:15px0;display:block;border:0 none;color:#CF7400;height:1px;clear:both;width:96%; }&lt;/code&gt;&lt;p&gt;Or a well organized, indexed, and documented file like this:&lt;/p&gt;&lt;code&gt;hr {&lt;br /&gt;
  &amp;emsp;background: #CF7400;&lt;br /&gt;
  &amp;emsp;border: 0 none;&lt;br /&gt;
  &amp;emsp;clear: both;&lt;br /&gt;
  &amp;emsp;color: #CF7400;&lt;br /&gt;
  &amp;emsp;display: block;&lt;br /&gt;
  &amp;emsp;height: 1px;&lt;br /&gt;
  &amp;emsp;margin: 25px;&lt;br /&gt;
  &amp;emsp;padding: 15px 0;&lt;br /&gt;	
  &amp;emsp;text-align: left;&lt;br /&gt;
  &amp;emsp;width: 96%;&lt;br /&gt;
  }&lt;br /&gt;
  &lt;/code&gt;&lt;p&gt;Keep in mind you are not the only one who is going to have your hands on the code. Above all else, removing comments to save space is just downright unprofessional.  Is it fair to leave the next developer working on the project an un-documented mess? Is it fair to your client?  I wouldn't want someone doing that to me, and I am surely not going to do it to someone else.&lt;/p&gt;&lt;h3&gt;Why all the trouble?&lt;/h3&gt;&lt;p&gt;We are in an interesting place in web-history right now.  Back in the 90's the web was a mess - sites were optimized for specific browsers, animated gif's were everywhere, and my god, the &amp;lt;blink&amp;gt; tags! During the 00's things were getting better, standards and practices started emerging but it took the better part of the decade get where we are now. As websites start blurring the line between pages and applications we have a responsibility to gather as a community and craft the best code we can. Semantics give meaning while removing ambiguity - cleaner and easier maintained code, better accessibility.&lt;/p&gt;&lt;p&gt;Above all else - using clear, concise markup shows professionalism.  Just like the furniture maker who actually takes time to finish the underside of the cabinet drawers, a craftsman takes pride in every aspect of his or her work.  Take pride in your HTML, take pride in your CSS, and take pride in your markup. If not for anything else just create something you can be proud of.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="http://cpeak.github.com/lessons/2011/12/29/jekyll-introduction"/>
   <updated>2011-12-29T00:00:00-06:00</updated>
   <id>http://cpeak.github.com/lessons/2011/12/29/jekyll-introduction</id>
   <content type="html">&lt;p&gt;This Jekyll introduction will outline specifically what Jekyll is and why you would want to use it. Directly following the intro we&amp;#8217;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id='overview'&gt;Overview&lt;/h2&gt;

&lt;h3 id='what_is_jekyll'&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &amp;#8220;a simple, blog aware, static site generator&amp;#8221;.&lt;/p&gt;

&lt;h3 id='examples'&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href='https://github.com/mojombo/jekyll/wiki/Sites'&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='what_does_jekyll_do'&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system. Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id='jekyll_is_not_blogging_software'&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements. This is a common source of confusion when getting started. Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id='why_should_i_care'&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient. The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server. Traditional dynamic blogs like Wordpress require a database and server-side code. Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;

&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;

&lt;li&gt;No internet connection required.&lt;/li&gt;

&lt;li&gt;Ability to publish via git.&lt;/li&gt;

&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;

&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;

&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='how_jekyll_works'&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples. This information is not intended to specifically teach you how to do anything, rather it is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id='initial_setup'&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href='/index.html#start-now'&gt;installing jekyll&lt;/a&gt; you&amp;#8217;ll need to format your website directory in a way jekyll expects. Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id='the_jekyll_application_base_format'&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 20011-10-25-open-source-is-good.markdown
|   |-- 20011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br /&gt;Stores configuration data.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;&lt;br /&gt;This folder is for partial views.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; &lt;br /&gt;This folder is for the main templates your content will be inserted into. You can have different layouts for different pages or page sections.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;&lt;br /&gt;This folder contains your dynamic content/posts. the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;&lt;br /&gt;This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;br /&gt;This folder is not part of the standard jekyll structure. The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory. Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href='https://github.com/mojombo/jekyll/wiki/Usage'&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id='jekyll_configuration'&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Configuration'&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='content_in_jekyll'&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page. These content &amp;#8220;objects&amp;#8221; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id='posts_and_pages'&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax. Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id='working_with_posts'&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; &lt;br /&gt;Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory. If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file. Additionally, each file must have &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt; prepended to its content. YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;br /&gt;Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy. Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; &lt;br /&gt;Posts can have tags associated with them as part of their meta-data. Tags may be placed on posts by providing them in the post&amp;#8217;s YAML front matter. You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; &lt;br /&gt;Posts may be categorized by providing one or more categories in the YAML front matter. Categories offer more significance over tags in that they can be reflected in the URL path to the given post. Note categories in Jekyll work in a specific way. If you define more than one category you are defining a category hierarchy &amp;#8220;set&amp;#8221;. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &amp;#8220;lessons/beginner&amp;#8221;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll. You won&amp;#8217;t find &amp;#8220;lessons&amp;#8221; and &amp;#8220;beginner&amp;#8221; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id='working_with_pages'&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;&lt;br /&gt;Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;In order to register as a Jekyll page the file must contain &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt;. Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;&lt;br /&gt;Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;&lt;br /&gt;If pages are defined in sub-directories, the path to the page will be reflected in the url. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br /&gt;You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;&lt;br /&gt;Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;&lt;br /&gt;Generating a sitemap is good practice for SEO.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;&lt;br /&gt;A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='templates_in_jekyll'&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&amp;#8217;s or post&amp;#8217;s content. All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;. The site variable holds all accessible content and metadata relative to the site. The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;&lt;br /&gt;Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;Templates should be coded in HTML and contain YAML Front Matter. All templates can contain Liquid code to work with your site&amp;#8217;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;&lt;br /&gt;There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;. The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined. Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='subtemplates'&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they define another &amp;#8220;root&amp;#8221; layout/template within their YAML Front Matter. This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id='includes'&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder. Includes are NOT templates, rather they are just code snippets that get included into templates. In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id='using_liquid_for_templating'&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll. This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id='what_is_liquid'&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href='https://github.com/Shopify/liquid'&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href='http://shopify.com'&gt;Shopify&lt;/a&gt;. Liquid is designed for end-users to be able to execute logic within template files without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with your site and post/page data.&lt;/p&gt;

&lt;h3 id='why_do_we_have_to_use_liquid'&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href='http://pages.github.com/'&gt;GitHub Pages&lt;/a&gt;. GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id='liquid_is_not_programmerfriendly'&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code. The point being you can&amp;#8217;t do jackshit in liquid that hasn&amp;#8217;t been allowed explicitly by the implementation. What&amp;#8217;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&amp;#8217;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; &lt;br /&gt;My personal stance is to not invest time trying to hack liquid. It&amp;#8217;s really unnecessary &lt;em&gt;from a programmer&amp;#8217;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code) you are better off sticking with ruby. Toward that end I&amp;#8217;ve built &lt;a href='http://github.com/plusjade/mustache-with-jekyll'&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='static_assets'&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages. That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id='how_jekyll_parses_files'&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; &lt;br /&gt;This is done with textile or markdown.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; &lt;br /&gt;This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;&lt;br /&gt;All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt; &lt;br /&gt;These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax. Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; &lt;br /&gt;Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id='formatting_files_for_parsing'&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;. Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty. This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block. The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id='defining_layouts_for_posts_and_templates_parsing'&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into. If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt; That is to say loading a post file into a template file that refers to another template file with work in the way you&amp;#8217;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id='how_jekyll_generates_the_final_static_files'&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&amp;#8217;s job is to generate a static representation of your website. The following is an outline of how that&amp;#8217;s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; &lt;br /&gt;Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; &lt;br /&gt;Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata. At this stage your site is one big computed ruby object.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;&lt;br /&gt;Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s). Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &amp;#8220;liquified&amp;#8221;. &lt;br /&gt;&lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; &lt;br /&gt;Finally the liquid templates are &amp;#8220;rendered&amp;#8221;, thereby processing any liquid syntax provided in the templates and saving the final, static representation of the file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;&lt;br /&gt;Because Jekyll computes the entire site in one fell swoop, each template is given access to a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&amp;#8217;ll iterate through and format using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;

&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap. You can also read the original documentation here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Template-Data'&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does. As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id='next_steps'&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href='' /&gt; or jump right into &lt;a href=''&gt;Usage&lt;/a&gt; if you&amp;#8217;d like.&lt;/p&gt;</content>
 </entry>
 
 
</feed>