<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Thoughts on ...</title>
 <link href="http://cpeak.github.com/atom.xml" rel="self"/>
 <link href="http://cpeak.github.com"/>
 <updated>2012-04-27T09:13:46-05:00</updated>
 <id>http://cpeak.github.com</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Gettin Sassy</title>
   <link href="http://cpeak.github.com/blog/2012/04/26/gettin-SASSy"/>
   <updated>2012-04-26T00:00:00-05:00</updated>
   <id>http://cpeak.github.com/blog/2012/04/26/gettin-SASSy</id>
   <content type="html">&lt;h2&gt;Gettin' SASSy&lt;/h2&gt;&lt;p&gt;This past week I finally took the plunge into CSS pre-processing and started playing around with &lt;a href='http://sass-lang.com/'&gt;SASS&lt;/a&gt;.  I've never been a huge fan of pre-processing - I like to be in complete control of what goes into my production level CSS files, but the whole point of my residency is to become a much more well-rounded developer and I want to have as many tools in my bag as I can. I have learned over the years that using the right tool for the job makes life a &lt;em&gt;lot&lt;/em&gt; easier.&lt;/p&gt;&lt;h3&gt;What does it do?&lt;/h3&gt;&lt;p&gt;SASS allows you to use variables and nesting (among other things) in your CSS. Install the gem - &lt;code&gt;gem install sass&lt;/code&gt;, create a new file called &lt;strong&gt;style.scss&lt;/strong&gt;, and run: &lt;code&gt;sass --watch style.scss:style.css&lt;/code&gt;. This translates &lt;strong&gt;style.scss&lt;/strong&gt; file into a normal .css file, automatically updating whenever you edit the original. Now lets take a look at what we can do.&lt;/p&gt;&lt;h4&gt;Variables&lt;/h4&gt;&lt;p&gt;The .scss file is like a normal cascading style sheet, but much more flexible. Using the &lt;a href='http://www.smacss.com'&gt;SMACSS&lt;/a&gt; approach we try to modularize our code the best we can, but there are times where we need to duplicate style calls. With SASS we can set variables which allows us to set global styles from &lt;em&gt;one&lt;/em&gt; location. Setting &lt;code&gt;$var: #3366cc;&lt;/code&gt; &amp;amp; &lt;code&gt; $main_border: 1px solid #ccc;&lt;/code&gt; allows us to use these styles anywhere in our stylesheet. In our style declaration,  set &lt;code&gt;$var&lt;/code&gt; or &lt;code&gt;$main_border&lt;/code&gt; and SASS will automatically translate it when it processes the .scss to .css&lt;/p&gt;&lt;div class='l_overflow'&gt;
&lt;div class='m_code_block'&gt;&lt;code&gt; .foo { &lt;br /&gt; &amp;emsp; border: $main_border; &lt;br /&gt; &amp;emsp; color: $var; &lt;br /&gt; &amp;emsp; ... &lt;br /&gt;  }&lt;/code&gt;
&lt;/div&gt;
&lt;div class='m_code_block'&gt;&lt;code&gt; .foo { &lt;br /&gt; &amp;emsp; border: 1px solid #ccc; &lt;br /&gt;  &amp;emsp; color: #3366cc; &lt;br /&gt; &amp;emsp; ... &lt;br /&gt;}&lt;/code&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4&gt;Nesting&lt;/h4&gt;&lt;p&gt;This also works for style nesting as well, which is a huge time-saver.  Lets see this in action:&lt;/p&gt;&lt;div class='l_overflow'&gt;
&lt;div class='m_code_block'&gt;&lt;code&gt;
.foo {&lt;br /&gt;
&amp;emsp; border: $main_border; &lt;br /&gt;
&amp;emsp; li { &lt;br /&gt;
&amp;emsp; &amp;emsp; color: $var;&lt;br /&gt;
&amp;emsp; &amp;emsp; width: 100px;&lt;br /&gt;
&amp;emsp; &amp;emsp; &amp;amp;:hover { &lt;br /&gt;
&amp;emsp; &amp;emsp; &amp;emsp; background-color: #f2f2f2;&lt;br /&gt;
&amp;emsp; &amp;emsp; } &lt;br /&gt; 
&amp;emsp; } 
&lt;/code&gt;
&lt;/div&gt;

&lt;div class='m_code_block'&gt;&lt;code&gt;
.foo {&lt;br /&gt;
&amp;emsp; border: #3366cc; &lt;br /&gt;
}  &lt;br /&gt;
.foo li { &lt;br /&gt;
&amp;emsp; color: #3366cc;&lt;br /&gt;
&amp;emsp; width: 100px;&lt;br /&gt;
} &lt;br /&gt;
.foo li:hover { &lt;br /&gt;
 &amp;emsp; background-color: #f2f2f2;&lt;br /&gt;
} 
&lt;/code&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p&gt;That's three separate style declarations bundled into one call in my .scss file.  This smooths out the workflow so I don't have to worry about breaking out each individual declaration, I can just define &lt;code&gt;.foo&lt;/code&gt; and let the SASS handle the nitty gritty details.&lt;/p&gt;&lt;h3&gt;The Good, The Bad, and The Ugly&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;The Good:&lt;/strong&gt; I like the fact that I can style an entire class in one fell swoop, I don't have to change mental gears and think of all the various declarations I need to cover. I can just go &lt;code&gt;.foo &gt; styles &gt; child &gt; styles &gt; states&lt;/code&gt;. This is a great option for veteran developers who understand the fundementals of it and want to fast-track some of the more monotonous coding.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;The Bad:&lt;/strong&gt; While I haven't developed a full project with it yet, I can see SASS hurting the practice of modularizing your CSS, and limiting semantic friendly markup.  A class chain might look like &lt;code&gt;&amp;lt;div class=&quot;l_left m_foo m_bar&quot;&amp;gt;...&amp;lt;div&amp;gt;&lt;/code&gt; (the div is has a layout class of left, is a  foo module as well as a bar module). Using the class chain method I can take a look at &lt;code&gt;.foo&lt;/code&gt; and see &amp;amp; change it's properties right from the html file itself. Heavily relying on SASS variables removes a level of semantics. &lt;code&gt;&amp;lt;div class=&quot;foo&quot;&amp;gt;&lt;/code&gt; doesn't tell me nearly as much as the previously mentioned class chain.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;The Ugly:&lt;/strong&gt; What I like the least is the output of the SASS processing. The production .css file can sometimes be harder to read by humans. As a craftsman I want my production files to be easy to navigate - that way when either I, or another developer goes back into the code six months or a year later it's easy to understand.&lt;/p&gt;&lt;h3&gt;Overall&lt;/h3&gt;&lt;p&gt;I haven't actually used it in a production environment yet, and when I do I will share my experiences in another post. So far I have mixed feelings on it - I like the premise, but I have a control issue (ok, that ones on me) - that's why I still drive a Jeep with a manual transmission and no ABS, I like to be in total control. Variables, nesting, interpolation, operations - these are all things I want to get excited about and want to see in the official CSS spec, but right now they aren't. I will continue experimenting and sharing my thoughts -  To be continued...&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Changin Education Paradigms</title>
   <link href="http://cpeak.github.com/blog/2012/04/24/changin-education-paradigms"/>
   <updated>2012-04-24T00:00:00-05:00</updated>
   <id>http://cpeak.github.com/blog/2012/04/24/changin-education-paradigms</id>
   <content type="html">&lt;h2&gt;Changing Education Paradigms&lt;/h2&gt;&lt;p&gt;I am passionate about education, learning, and problem solving, so as a non-traditional student who didn't get much out of the standard education model I &lt;em&gt;have&lt;/em&gt; to share this. Ken Robinson is brilliant and everyone needs to &lt;a href='http://www.youtube.com/watch?v=iG9CE55wbtY'&gt;hear&lt;/a&gt; &lt;a href='http://www.youtube.com/watch?v=r9LelXa3U_I'&gt;what&lt;/a&gt; &lt;a href='http://www.youtube.com/watch?v=9X0CESnGQ8U&amp;feature=related'&gt;he has to say.&lt;/a&gt;&lt;/p&gt;&lt;iframe src='http://www.youtube.com/embed/zDZFcDGpL4U' frameborder='0' height='545' width='790'&gt;  &lt;/iframe&gt;</content>
 </entry>
 
 <entry>
   <title>Love Your Solution</title>
   <link href="http://cpeak.github.com/blog/2012/04/21/love-your-solution"/>
   <updated>2012-04-21T00:00:00-05:00</updated>
   <id>http://cpeak.github.com/blog/2012/04/21/love-your-solution</id>
   <content type="html">&lt;h2&gt;Love your solution&lt;/h2&gt;&lt;p&gt;I recently sat up late one night obsessing over a tiny detail of an app we are working on and I had one of those fantastic moments when I came up with a solution that I absolutely loved. One of those moments where you can't work fast enough to implement your idea. These are the details that shine, but they make the less-than-ideal parts stand out even more.  Programmers often talk about 'smells'- various bits of code that aren't quite up to par, and the same is true for UI/UX. If you're sitting in a meeting and not anxious to show off your design, something smells. You know you've done a great job when you want to show off your solution and point out all the little detais. Take pride in your work and make sure at the end of the day it's something worthy of putting your name on.&lt;/p&gt;&lt;h3&gt;Kill the lazy&lt;/h3&gt;&lt;p&gt;I was in a meeting and while the team was presenting our application they clicked on a link and up popped a window - formatted with legacy code, didn't fit into the new design, one of those little nooks that is so easy to overlook.  My face and neck got hot and I knew that was one thing that should have been done but wasn't.  I fed myself a few excuses about why I didn't get around to it, but in the end they were just excuses. I was too lazy to put in the extra effort and finish the job. At some point last week I decided to call it a day and catch the train home instead of saying 'I'll stay late, finish this up, and catch the next train'. Yes, sometimes there is too much to do and not enough time to do it, but if you want to be successful learn to find those moments and kill em. Work hard, stay late, sweat the details. Those lazy moments keep your design from being awesome. I don't care if its one button in the 'edit client' popup, or the entire UI for an application, I want to find the best design for it and say 'I did that!'. &lt;/p&gt;&lt;h3&gt;Be Thankful&lt;/h3&gt;&lt;p&gt;Aaron Draplin recently posted a video of one of his talks, &lt;em&gt;&lt;a href='http://vimeo.com/39441590'&gt;The DDC 50 Point Plan To Ruin Yer Career&lt;/a&gt;&lt;/em&gt; (thanks to &lt;a href='http://www.37signals.com/svn'&gt;37signals&lt;/a&gt;) which I highly recommend watching. Blunt and to the point, he makes some great points applicable to anyone in any field and I wanted to share the last point from the talk: &lt;strong&gt;&lt;em&gt;Be thankful for everything.&lt;/em&gt;&lt;/strong&gt; I still can't believe I am where I am today, doing what I absolutely love and am able to support myself! I am extremely thankful and I try to remind myself every day. &lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Share What You Learn</title>
   <link href="http://cpeak.github.com/blog/2012/04/18/share-what-you-learn"/>
   <updated>2012-04-18T00:00:00-05:00</updated>
   <id>http://cpeak.github.com/blog/2012/04/18/share-what-you-learn</id>
   <content type="html">&lt;h2&gt;Share What You Learn&lt;/h2&gt;&lt;p&gt;Yesterday Darek asked for some help with an application he is writing, so we did a quick UI get together which actually was one of the best moments I have had at 8th Light thus far. To this point I have been rolling full-steam ahead on learning as much as I can and honing my craft. I have helped apprentices out here and there as well contributed during project iteration meetings, but nothing has really made me as happy as just banging out a UI and teaching the finer points of my craft and what I have learned so far.&lt;/p&gt;&lt;p&gt;We sat down and talked about an interface for a run-logging application he is working on, sketching out some ideas together. I explained how I look at designing a user interface as a workflow with beginning, middle, and end states, and try to envision how the flow of the app will work.  I shared a bit of my experience with him and even learned more about how developers tackle the same problem I would. Even though it was only 10 minutes, it made my day. I can't wait to see what he comes up with.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Flipping The Div</title>
   <link href="http://cpeak.github.com/blog/2012/04/13/flipping-the-div"/>
   <updated>2012-04-13T00:00:00-05:00</updated>
   <id>http://cpeak.github.com/blog/2012/04/13/flipping-the-div</id>
   <content type="html">&lt;h2&gt;Flipping The Div&lt;/h2&gt;&lt;p&gt;I just wrapped up reading &lt;a href='http://hardboiledwebdesign.com/'&gt;&lt;em&gt;Hardboiled Web Design&lt;/em&gt;&lt;/a&gt; by Andy Clarke, which is a fantastic read and I highly recommend it. I really enjoyed one specific example he used in the book and I wanted to really go over each line of code to get a solid understanding of how it worked.  In the book he goes through and creates a mock online book store, and one feature was clicking on the book cover and it flips around to reveal the information on the backside. Here is what it looks like:&lt;/p&gt;&lt;div id='m_flip_container'&gt;

&lt;div class='item' id='s01'&gt;
&lt;div class='inner'&gt;
&lt;a href='#s01'&gt;&lt;img src='/images/seaport.png' alt='' /&gt;&lt;/a&gt;

  &lt;div class='description'&gt;
  &lt;p&gt;&lt;strong&gt;Mystic Seaport&lt;/strong&gt;&lt;br /&gt;
  &lt;strong&gt;Camera:&lt;/strong&gt; EOS 10D&lt;br /&gt;
  &lt;strong&gt;Exposure:&lt;/strong&gt; 1/500 at 28mm&lt;br /&gt;
  &lt;strong&gt;Aperture:&lt;/strong&gt; f8&lt;/p&gt;
  &lt;p&gt;The &lt;em&gt;Emma Berry&lt;/em&gt; id docked along the river at the Mystic Seaport.&lt;/p&gt;
  &lt;/div&gt; 
&lt;/div&gt;
&lt;/div&gt;

&lt;div class='item' id='s02'&gt;
&lt;div class='inner'&gt;
&lt;a href='#s02'&gt;&lt;img src='/images/heron.png' alt='' /&gt;&lt;/a&gt;

&lt;div class='description'&gt;
&lt;p&gt;&lt;strong&gt;Blue Heron&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Camera:&lt;/strong&gt; EOS 10D&lt;br /&gt;
&lt;strong&gt;Exposure:&lt;/strong&gt; 1/250 at 200mm&lt;br /&gt;
&lt;strong&gt;Aperture:&lt;/strong&gt; f4&lt;/p&gt;
&lt;p&gt;A Great Blue Heron stands in the morning sun along the reeds on the Fox River in Batavia, IL&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;


&lt;script&gt;
var $panels = $('div.item');

$('div.item a[hash^=#]').click(function (event) {
  event.preventDefault();
  $panels.removeClass('flip');
  $(this.hash).addClass('flip');
});
&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In the example the author used books in a bookstore, however since I am a photographer I thought it would be a interesting way to present information about a particular photograph. First I setup the two 'front' div's with unique ID's so we can target them individually.  The entire front div is a link which targets itself led by a hash - this allows the script to listen for specific links so it can apply the flip class using JQuery. Once the script on the page triggers the flip class, CSS3 Animations can do the heavy work.&lt;/p&gt;&lt;p&gt;Using &lt;code&gt;.cssanimations&lt;/code&gt;, we can achieve our flip effect using just a few attributes. First and foremost is the &lt;code&gt;transform: rotateY(180deg);&lt;/code&gt;, which flips our div 180&amp;deg; on the Y axis. This achieves the basic functionality of flipping the photograph, but we want to really make it pop. We can add two more attributes to make the design really jump: &lt;code&gt;perspective&lt;/code&gt; which keeps the div centered during the animation &amp;amp; &lt;code&gt;transform-style: preserve-3d&lt;/code&gt;, which obviously preserves the three-dimensional effect. Once the transform has been triggered the script also toggles visibility of the 'back' of the photo so it swings around and appears to be attached to the back. Another good idea is to have the script toggle the flip class so that only one div can be flipped at once, so when the user clicks another book, or photo in our case, it flips the last one back into place.&lt;/p&gt;&lt;p&gt;Now one big hurdle is how do we clue the user into the fact that there is additional information on the back of these photos? We could add some sort of icon on each, but that is clunky and not very straightforward. Instead lets have the script fire on page load to give a quick peek at the back then flip over again to its original position. This lets the visitor know that there is additional content on the back of each item and encourages them to click on them to find it.&lt;/p&gt;&lt;p&gt;This is a very brief description of the entire process, so in future posts I will break down each individual attribute so we can get a solid working understanding of how &lt;code&gt;.cssanimations&lt;/code&gt; can add an extra flourish to our designs.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Rss Functionality</title>
   <link href="http://cpeak.github.com/blog/2012/04/09/rss-functionality"/>
   <updated>2012-04-09T00:00:00-05:00</updated>
   <id>http://cpeak.github.com/blog/2012/04/09/rss-functionality</id>
   <content type="html">&lt;h2&gt;New: RSS/Atom Feed Support&lt;/h2&gt;&lt;p&gt;Today I added RSS and Atom feed support for my residency blog. Thanks to GitHub user &lt;a href='https://github.com/coyled/coyled.com'&gt;Dave Coyle&lt;/a&gt; for the Jekyll Atom &amp;amp; RSS templates, as well as a tip of the hat to &lt;a href='https://github.com/beporter'&gt;beporter&lt;/a&gt; for the link. If you want to subscribe to my blog, just add &lt;a href='http://cpeak.github.com/rss.xml'&gt;http://cpeak.github.com/rss.xml&lt;/a&gt; to your reader of choice.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Stay Positive</title>
   <link href="http://cpeak.github.com/blog/2012/04/06/stay-positive"/>
   <updated>2012-04-06T00:00:00-05:00</updated>
   <id>http://cpeak.github.com/blog/2012/04/06/stay-positive</id>
   <content type="html">&lt;h2&gt;Stay Positive&lt;/h2&gt;&lt;p&gt;This past week I spent a lot of time working on an internal development project and just working on the design principles I have learned over the past six weeks. I wanted to share a quote that has stuck with my over the past few years from Ira Glass.  Its about staying positive when you know you can do better. This applies to just about any field, but is especially important to those of us with a talent for the creative arts:&lt;/p&gt;&lt;p class='t_quote_block gen_border'&gt;You’ve got to get rid of a lot of crap before you’re going to get anything that’s special. You don’t want to be making mediocre stuff. There’s a gap for the first couple years that you’re making stuff. What you’re making isn’t so good. But your taste, the thing that got you into the game, is good enough that you can tell what you’re making is kind of a disappointment to you. A lot of people at that point, they quit. The thing I would say to you with all my heart is that most everybody I know who does interesting, creative work, went through a phase of years where they had really good taste, they could tell what they were making wasn’t as good as they wanted it to be. They knew it fell short. Everybody goes through that. If you’re going through it right now, or if you’re just starting off and you’re entering into that phase, you’ve got to know its totally normal and the most important thing you could do is a lot of work. Do a huge volume of work because it’s only by actually going through a volume of work that you’re actually going to catch up and close that gap.&lt;br /&gt;&lt;strong&gt;- Ira Glass&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;I know I have come a long way with my development and design but I know that I can do so much better. So while I continue my journey as an 8th Light Resident I need to stay positive and keep learning.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Uncle Bob</title>
   <link href="http://cpeak.github.com/blog/2012/03/30/uncle-bob"/>
   <updated>2012-03-30T00:00:00-05:00</updated>
   <id>http://cpeak.github.com/blog/2012/03/30/uncle-bob</id>
   <content type="html">&lt;h2&gt;Uncle Bob&lt;/h2&gt;&lt;img class='m_post_image' src='/images/uncle_bob.png' alt='Uncle Bob' /&gt;&lt;p&gt;Another great talk by Uncle Bob on 'The Liskov Substitution Principle' at todays &lt;a href='http://university.8thlight.com'&gt;8th Light University&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Speedometer</title>
   <link href="http://cpeak.github.com/blog/2012/03/30/speedometer"/>
   <updated>2012-03-30T00:00:00-05:00</updated>
   <id>http://cpeak.github.com/blog/2012/03/30/speedometer</id>
   <content type="html">&lt;h2&gt;1.21 Giggawatts!&lt;/h2&gt;&lt;h3&gt;The JQuery and Javascript speedometer project&lt;/h3&gt;&lt;img class='m_post_image' src='/images/speedo.png' alt='Javascript speedometer project' /&gt;&lt;h3&gt;The Assignment&lt;/h3&gt;&lt;p&gt;This past week my assignment was to create a digital speedometer using CSS3, JQuery and Javascript, using &lt;a href='http://stephaniebriones.com/speedometer/'&gt;Stephanie's project&lt;/a&gt; as inspiration. The original task came about because Billy and Stephanie had found &lt;a href='http://annyas.com/chevrolet-speedometer-design/'&gt;a set of old dashboard typography&lt;/a&gt;, so the challenge was created as a fun way to hone our skills.&lt;/p&gt;&lt;h3&gt;The Challenges&lt;/h3&gt;&lt;p&gt;The first hurdle was going to be figuring out CSS3's rotate property. Once that was taken care of I would have to get the &lt;code&gt;&amp;lt;needle&amp;gt;&lt;/code&gt; div to rotate on key press for acceleration and deceleration, limiting rotation from zero to top speed.  I wanted to take it a step further and add an odometer that displayed distance travelled as well, so a bit of math was going to be involved. On top of everything I also wanted to do something different. I wondered if there were any famous cars or dashboards in geek culture - it hit me like a bolt of lightning on November 12th, 1955!&lt;/p&gt;&lt;p&gt;Once I got a few source images of an original Delorean dashboard and watched all three movies (research is important) I had a better scope of how I wanted to design my Time Machine. I would have to create the analog speedometer, a digital speedometer, and a flux capacitor. Great Scott! Lots to do!&lt;/p&gt;&lt;h3&gt;The Speedometer itself&lt;/h3&gt;&lt;p&gt;The whole assignment hinged on the actual speedometer needle itself. I created a thin div 200px high by 6px wide. By default I needed the needle to rest at 0mph, so I set the default rotation value to &lt;code&gt;-webkit-transform: rotate(-140deg);&lt;/code&gt;. -140&amp;deg; being the zero position on an original Delorean.&lt;/p&gt;&lt;p&gt;Stephanies design hinged the needle right from one end but since I am a car geek as well I know that a lot of speedometers actually hinge slightly above the base leaving a small tail. After some interesting errors I found I could create the effect by calling &lt;code&gt;-webkit-transform-origin: 50% 90%;&lt;/code&gt;. This grabs the &lt;code&gt;&amp;lt;needle&amp;gt;&lt;/code&gt; div in the middle very close to the bottom. I added a small div underneath to recreate the base.&lt;/p&gt;&lt;p&gt;Now I had to use Javascript and JQuery to listen for a key press. When the space bar is pressed it targets the &lt;code&gt;&amp;lt;needle&amp;gt;&lt;/code&gt; div and adjusts the rotation. I added a &lt;code&gt;-webkit-transition: -webkit-transform: .35s -ease out;&lt;/code&gt; definition to give it a small delay to mimic the lurch between when you hit the gas and when you start accelerating. Now we have a functioning speedometer that rotates the needle as you press the gas but sticks after you let go. Hrm, cruise control must be stuck.  I struggled with this one, but eventually came to the same conclusion that Stephanie and Miles did - by default the vehicle would be decelerating.  I hacked together some ugly Javascript but eventually had to peek at their code and get some inspiration. Finally we had a working speedometer That eases forward when you apply gas, and eases back to 0 as you slow down.&lt;/p&gt;&lt;h3&gt;Going the extra mile&lt;/h3&gt;&lt;p&gt;I also wanted to add a digital speedometer like the one Doc Brown had installed above the time panel and flux capacitor. The data was already in the code I just had to extract and display it correctly. My main issue was with the script being too precise - as it calculates the speed it dumps out a number with around 5-10 trailing decimal places. I did some research and most people recommended a backwards approach of applying math tricks and hacks to round it off but I knew these were inelegant. I knew there had to be a Javascript call to limit the output of a variable to a set number of places, there are plenty of calls to format output like date and time, why not one for decimal points? &lt;code&gt;parseInt()&lt;/code&gt; takes care of that problem, it parses a given string and returns an integer.  Another extra touch was to make sure the digital speedometer always displayed two digits so during our loop the script checks to see if it is less than 10 mph and if it is, it prepends it with a zero. I also wanted to add some functionality to the Flux Capacitor. During the &lt;code&gt;setSpeedometer&lt;/code&gt; loop the script checks to see if the speed is at or above 88mph and if it is, Javascript changes the Capacitor to on.&lt;/p&gt;&lt;p&gt;The more irritating problem was getting the odometer working. Putting on my 8th grade Algebra 1 hat I postulated that since our script cycles at 10 loops/second we had our rate and then could calculate distance. By that logic the loop can figure out how far its travelled in 1/10th of a second at X speed. I had to write some conversion equations in order to change it to MPH for the dial. The odometer even goes up when you are decelerating as well since you are still travelling forward.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Z Index And Positioning</title>
   <link href="http://cpeak.github.com/blog/2012/03/16/Z-Index-and-Positioning"/>
   <updated>2012-03-16T00:00:00-05:00</updated>
   <id>http://cpeak.github.com/blog/2012/03/16/Z-Index-and-Positioning</id>
   <content type="html">&lt;article&gt;
  &lt;h2&gt;Sorting out Position &amp;amp; Z-Index Properties&lt;/h2&gt;
  &lt;p&gt;One concept of web design that can trip up beginners and less-experienced developers is the &lt;code&gt;position&lt;/code&gt; &amp;amp; &lt;code&gt;z-index&lt;/code&gt; properties.  CSS gives the designer flexibility to move elements around the page freely, and not just in two dimensions.  Using these two properties you can stack and layer divs so they flow above, below, and through each other. However when elements are positioned differently they are taken out of the normal flow of the document. Lets take a look&lt;/p&gt;
  &lt;h3&gt;Position&lt;/h3&gt;
  &lt;p&gt;The &lt;code&gt;position&lt;/code&gt; property allows a div to break free from the normal flow of the layout. Typically elements are rendered in order and laid out according to their float &amp;amp; margin properties.  Using a &lt;code&gt;fixed&lt;/code&gt; or &lt;code&gt;absolute&lt;/code&gt; position property, the element will ignore the normal document flow and behave depending on a different set of rules.&lt;/p&gt;
  &lt;h3&gt;Position: Fixed&lt;/h3&gt;
  &lt;p&gt;A div that is set to &lt;code&gt;position:fixed&lt;/code&gt; will ignore the entire document flow, positioning itself only in relation to the view screen.  In other words it will remain in a fixed spot in the browser window irregardless of where the user scrolls to. How do we define where in the browser window the element will display? To do this we have to set the &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; properties in our CSS. For &lt;code&gt;&amp;lt;div id=&quot;foo&quot;&amp;gt;&lt;/code&gt; we can set &lt;code&gt;top: 10px;&lt;/code&gt; and &lt;code&gt;left: 50px;&lt;/code&gt; that way &lt;code&gt;foo&lt;/code&gt; will display 10px from the top and 50px from the left, creating a static div that will remain in that location at all times. This can be advantageous for example if we have a page with a lot of text that the user must scroll through - when the user reaches the bottom the navigation is still at the top left, so they dont have to scroll all the way back to the top to move to a new page.&lt;/p&gt;
  &lt;h3&gt;Position: Absolute&lt;/h3&gt;
  &lt;p&gt;Here is where it gets a little tricky. Lets set &lt;code&gt;foo&lt;/code&gt; to &lt;code&gt;position: absolute;&lt;/code&gt;. Without changing anything else the div may not move at all.  A div with an &lt;code&gt;absolute&lt;/code&gt; positioning will ignore the document flow, and position itself based on its &lt;em&gt;parent&lt;/em&gt; div.  If div is sitting within the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; section it will float in the top left just as before.  However, if we move it into another section of the page it will relate itself to that particular parent element &lt;em&gt;only if that parent element has its position set to &lt;code&gt;relative&lt;/code&gt;.&lt;/em&gt; Wait a second, &lt;code&gt;relative&lt;/code&gt;?  This is where a lot of people get confused. Setting a div to &lt;code&gt;relative&lt;/code&gt; tells all its child elements to use itself to orient themselves when they are positioned absolutely. If you dont define the parent element the child will find the first container above it set to &lt;code&gt;relative&lt;/code&gt; and position itself according to that. If you dont set your &lt;code&gt;absolute&lt;/code&gt; and &lt;code&gt;relative&lt;/code&gt; tags correctly, some strange thing will happen.&lt;/p&gt;
  &lt;h3&gt;Z-Index&lt;/h3&gt;
  &lt;p&gt;Just to further the complexity, lets take a look, at &lt;code&gt;z-index&lt;/code&gt;.  This property allows us to stack our elements in 3 dimensions, just like an animator with multiple cells creating a layered effect, we can leverage it to create some interesting designs. If left un-defined any element will have a default &lt;code&gt;z-index&lt;/code&gt; of 0. A div set to 10 will render above, and -10 will render below.  Combine this with the &lt;code&gt;position&lt;/code&gt; property and your design is infinitely more flexible.&lt;/p&gt;
  &lt;h3&gt;Bring it all together&lt;/h3&gt;
  &lt;p&gt;You can go even &lt;em&gt;further&lt;/em&gt; down the rabbit hole by throwing JQuery into the mix, dynamically changing &lt;code&gt;z-index&lt;/code&gt; properties on the fly.  Just remember these are garnishes, if you start moving things around and re-stacking tons of elements things will probably start mis-behaving, or worse confuse your visitors. These are tools any good developer should have in their bag, but remember to &lt;em&gt;use the correct tool for the job&lt;/em&gt;.&lt;/p&gt;
&lt;/article&gt;</content>
 </entry>
 
 <entry>
   <title>Music Theory</title>
   <link href="http://cpeak.github.com/blog/2012/03/09/Music-Theory"/>
   <updated>2012-03-09T00:00:00-06:00</updated>
   <id>http://cpeak.github.com/blog/2012/03/09/Music-Theory</id>
   <content type="html">&lt;article&gt;
  &lt;h2&gt;Music Theory and Web Design?&lt;/h2&gt;
  &lt;p&gt;In my last post I discussed some practices I have been learning in order to clean up my HTML5 and CSS code on the back end.  This week I have been working on how to improve my typography, design, and layout using a grid based approach aided by the modular scale.&lt;/p&gt;
  &lt;h3&gt;Modular Scale&lt;/h3&gt;
  &lt;p&gt;The modular scale is a mathematical approach to layout design using ratios that are found in music. Thankfully my wife was a voice major in college so when I asked her about scales about it she gave me a long lecture on how they can evoke certain feelings or '&lt;em&gt;ethos&lt;/em&gt;'.  If your goal is a more upbeat design then you may want to use a perfect-fourth which is a happier scale.  Conversely if you want a more serious and somber design, something like a minor-sixth might suit your needs. Now, how in the world do we apply music theory to web design? A scale is all based on the root note, whatever it may be.&lt;/p&gt;
  &lt;p&gt;We take the ratios found in the scales and apply them to our root note or in our case, our base text size. Lets say our goal is to have a base text size of 16px - using a perfect fourth scale you get 16, 21, 28, 38, 50, 67, and so on. Now we can apply this to our design - our H1 tag will be at 67px, H2 50px, etc, back down to our root 16px text size. Not only do we use this for picking out our font-size's we can also use these numbers in our grid spacing.&lt;/p&gt;
  &lt;h3&gt;Grid Based Layout&lt;/h3&gt;
  &lt;p&gt;As a carpenter would you build a house without a level?  Sure you could frame the house and get everything together, but it wouldn't be anywhere near as good as it should be.  &lt;a href='http://www.smashingmagazine.com/2007/04/14/designing-with-grid-based-approach/'&gt;Smashing Magazine says it best&lt;/a&gt;: &lt;em&gt;Your goal is to establish a consistent, logical screen layout, one that allows you to &amp;quot;plug in&amp;quot; text and graphics without having to stop and rethink your basic design approach on each new page.&lt;/em&gt;&lt;/p&gt;
  &lt;p&gt;Using the &lt;a href='http://www.hashgrid.com'&gt;#Grid&lt;/a&gt; JavaScript plugin I can toggle an overlay onto a site and see how the modules line up on the grid based layout. I re-visited my Tribune Article redesign project and used the perfect-fourth scale to determine column, gutter, and body width.  I knew I wanted a few more columns than usual in my layout due to the complexity of a news site and I was also limited in screen size to roughly 1000px.  Looking at our scale and crunching some numbers, I came up with a layout of 6 columns at 120px with gutters of 38px.  This gave us a total width of 948px.&lt;/p&gt;
  &lt;img src='/images/grid_layout.png' alt='Grid Based Layout' /&gt;
  &lt;p&gt;As you can see in the photo above, the main article uses roughly 3 columns, then a gutter, then the sidebar uses precisely 2. Now the layout has a much better and more consistent flow. The photo and caption sit nicely in the second and third column, and to create some tension I made sure the article didn't flow all the way over to the edge of the 3rd column.&lt;/p&gt;
  &lt;p&gt;Just remember that these are guidelines and can be broken when necessary. Bending or breaking these rules create tension and unique design... just be careful when you stray from your scales .&lt;/p&gt;
&lt;/article&gt;</content>
 </entry>
 
 <entry>
   <title>Breaking The Habit</title>
   <link href="http://cpeak.github.com/blog/2012/03/02/Breaking-the-habit"/>
   <updated>2012-03-02T00:00:00-06:00</updated>
   <id>http://cpeak.github.com/blog/2012/03/02/Breaking-the-habit</id>
   <content type="html">&lt;h2&gt;Breaking The Habit&lt;/h2&gt;&lt;p&gt;Over the past two weeks I have done a lot of reading while diving back into HTML &amp;amp; CSS coding and reviewing the work habits that got me here. Previously I felt my code was strutting like John Travolta in &lt;em&gt;Saturday Night Fever&lt;/em&gt;, but the more I learn it's looking more like Disco Stu.  I am largely self-taught, which in of itself is not a bad thing, but over the years I have developed some bad habits and peculiar idiosyncrasies. Now that I am doing this for a living it's time to break those habits and lay a solid foundation to grow as a professional developer.&lt;/p&gt;&lt;p&gt;Like a lot websites out there my old projects were a big jumble of div IDs and classes using a pseudo-semantic formula that seemed to work well for me at the time. Typical sites would have a &amp;lt;div id=&quot;header&quot;&amp;gt;, a &amp;lt;div id=&quot;nav&quot;&amp;gt;, a few layout divs, some content classes and a &amp;lt;div id=&quot;footer&quot;&amp;gt;, however I never set my naming conventions in stone. Now HTML5 has introduced some new elements that will help make markup and structure more concise and descriptive - better for maintenance, better for human eyes, and better for accessibility.&lt;/p&gt;&lt;p&gt;In my last job I would occasionally get web re-design projects put on my plate, and as a developer there are few things scarier than having to pull the lid off an older website, invariably written by the client's teenage neighbor, and see how utterly terribly it was built in the first place. Markup filled with unconventional naming practices, little or no documentation, or even (*shuddering*) table-based layouts. So lets take a look at some things that we can do to break these habits so we can produce well written, clean, semantic, thoughtful, and efficient code. Now, where do we begin?&lt;/p&gt;&lt;h3&gt;Better semantics in HTML5 &lt;/h3&gt;&lt;p&gt;One of the main goals for the new HTML5 spec was to remove ambiguity by adding concise elements. Some of the bigger additions are: &amp;lt;header&amp;gt; &amp;lt;nav&amp;gt; &amp;lt;footer&amp;gt; &amp;lt;article&amp;gt; &amp;lt;aside&amp;gt; and &amp;lt;section&amp;gt;. I could easily fall down the rabbit hole explaining all these, but there are &lt;a href='http://html5doctor.com/'&gt;plenty of other resources&lt;/a&gt; explaining each one in detail. By using these tags as our base skeleton for a site we now have a solid foundation to build from:&lt;/p&gt;&lt;code&gt;
    &amp;lt;header&amp;gt; &lt;br /&gt;
    &amp;emsp; &amp;lt;nav&amp;gt; &lt;br /&gt;
    &amp;emsp; &amp;lt;section id=&quot;main_content&quot;&amp;gt; &lt;br /&gt;
    &amp;emsp; &amp;emsp; &amp;lt;article&amp;gt; &lt;br /&gt;
    &amp;emsp; &amp;emsp; &amp;lt;article&amp;gt; &lt;br /&gt;
    &amp;emsp; &amp;emsp; &amp;lt;article&amp;gt; &lt;br /&gt;
    &amp;emsp; &amp;lt;/section&amp;gt; &lt;br /&gt;
    &amp;lt;footer&amp;gt; &lt;br /&gt;
  &lt;/code&gt;&lt;p&gt;This structure makes our site much easier to build on, adjust, maintain, and understand - not only for us as developers but screen-readers and other accessibility tools, as well as search-engines. Now screen readers will now have a very easy time determining where the primary navigation, main content, or other sections of the page are. For example before, &amp;lt;div id=&quot;menu&quot;&amp;gt; could either be the site's primary navigation or it could be an actual menu for a restaurant.  With semantic markup we now know that &amp;lt;nav&amp;gt; is meant for site navigation, avoiding any ambiguity between nav and menu.&lt;/p&gt;&lt;p&gt;We can also tell where the meat of the site now lies, finding it in the new &amp;lt;article&amp;gt; tag. The article tags primary purpose is to exist as a self-contained entity of the site - a blog or forum post, newspaper article, widget, or &quot;&lt;em&gt;any other independent item of content&lt;/em&gt;&quot; - &lt;a href='http://dev.w3.org/html5/spec/Overview.html#the-article-element'&gt;per the W3C spec&lt;/a&gt;.  Articles can have their own &amp;lt;header&amp;gt; and  &amp;lt;footer&amp;gt; sections of their own, as long as they are all related to the article itself. Just remember the word &lt;em&gt;independent&lt;/em&gt;.  Does the &amp;lt;article&amp;gt; make sense on it's own?  Using these new tags we get to trim some &amp;lt;div&amp;gt;'s from our site, getting us more separation from our CSS.&lt;/p&gt;&lt;p&gt;You may be saying to yourself: &amp;quot;Ah hah! What about our CSS?&amp;quot;&lt;/p&gt;&lt;h3&gt;SMACSS&lt;/h3&gt;&lt;p&gt;&lt;a href='http://smacss.com/'&gt;Scalable and Modular Architecture for CSS&lt;/a&gt; (SMACSS) is a new way to look at organizing your CSS code.  By categorizing your CSS rules you can start to tame the wild beast that some of your more complex projects may have become (or preventing new projects from getting out of hand). SMACSS doesn't come down off the mount declaring what you should or shouldn't do, but it does help you identify some areas where you can improve your organization. They recommend you break your rules into 5 categories: Base, Layout, Module, State, and Theme.  &lt;span class='quote'&gt;&amp;quot;By categorizing CSS rules, we begin to see patterns and can define better practices around each of these patterns.&amp;quot; - Jonathan Snook&lt;/span&gt; &lt;/p&gt;&lt;p&gt;By identifying patterns we can make it more efficient by streamlining the code. SMACSS also allows us to &lt;a href='http://smacss.com/book/applicability'&gt;reduce our depth of applicability&lt;/a&gt;, thus reducing our dependency on the HTML structure. When we are less dependent on the actual HTML structure, the design is much more fluid and can be easily fit to various layouts and screen sizes with little extra effort.&lt;/p&gt;&lt;h3&gt;Trimming the fat&lt;/h3&gt;&lt;p&gt;Its easy to have CSS files get unruly and out of hand.  A lot of times there are some areas where we can trim some fat in our code, increasing efficiency while reducing load times.  In some instances multiple properties can be combined into one valid declaration.  Lets look at a very common declaration - 4 rules that apply to the &amp;lt;p&amp;gt; text for this blog: &lt;/p&gt;&lt;code&gt;
    font-family: &quot;prenton&quot;;&lt;br /&gt;
    font-size: 17px; &lt;br /&gt;
    font-weight: 300; &lt;br /&gt;
    line-height: 1.4em;*/
  &lt;/code&gt;&lt;p&gt;That can be re-written down to one property call - font: &lt;i&gt;weight size/line-height family&lt;/i&gt;&lt;/p&gt;&lt;section class='code_example'&gt;
  &lt;code&gt;font: 300 17px/1.4em &quot;prenton&quot;;&lt;/code&gt;
  &lt;/section&gt;&lt;p&gt;The same practice can be applied to many different declarations that use multiple lines for the same element &lt;em&gt;(e.g. Margin &amp;amp; Padding)&lt;/em&gt;. Similarly I tend to use one line if there are only one or two properties in the same declaration:&lt;/p&gt;&lt;section class='code_example'&gt;
  &lt;code&gt;.left { float: left; padding-right: 10px; }&lt;/code&gt;
  &lt;/section&gt;&lt;p&gt;Much better, right? Formatting your CSS sheets does come down to personal preference, but SMACSS gives you a great framework to build on, or at least give you some ideas help develop your own system.&lt;/p&gt;&lt;h3&gt;Getting in shape&lt;/h3&gt;&lt;p&gt;What else can we do to whip our CSS into shape? I've seen some blogs and articles suggesting that you have all property declarations on the same line, removing extra white space &amp;amp; line breaks, and even going so far as to removing comments from production files to save weight (*face palm*).  I understand the sentiment, but it seems to me like re-arranging the deck chairs on the Titanic - sure it gives you something to do but it doesn't achieve anything.&lt;/p&gt;&lt;p&gt;By tightening the belt that much you are actually making things worse - you are breaking down readability and maintainability of the site.  What happens in a year from now when the client changes developers and want something changed on the site? As a developer,  which would you rather see? A CSS file full of entries like this:&lt;/p&gt;&lt;code&gt;hr { background:#CF7400;margin:25px0;text-align:left;padding:15px0;display:block;border:0 none;color:#CF7400;height:1px;clear:both;width:96%; }&lt;/code&gt;&lt;p&gt;Or a well organized, indexed, and documented file like this:&lt;/p&gt;&lt;code&gt;hr {&lt;br /&gt;
  &amp;emsp;background: #CF7400;&lt;br /&gt;
  &amp;emsp;border: 0 none;&lt;br /&gt;
  &amp;emsp;clear: both;&lt;br /&gt;
  &amp;emsp;color: #CF7400;&lt;br /&gt;
  &amp;emsp;display: block;&lt;br /&gt;
  &amp;emsp;height: 1px;&lt;br /&gt;
  &amp;emsp;margin: 25px;&lt;br /&gt;
  &amp;emsp;padding: 15px 0;&lt;br /&gt;	
  &amp;emsp;text-align: left;&lt;br /&gt;
  &amp;emsp;width: 96%;&lt;br /&gt;
  }&lt;br /&gt;
  &lt;/code&gt;&lt;p&gt;Keep in mind you are not the only one who is going to have your hands on the code. Above all else, removing comments to save space is just downright unprofessional.  Is it fair to leave the next developer working on the project an un-documented mess? Is it fair to your client?  I wouldn't want someone doing that to me, and I am surely not going to do it to someone else.&lt;/p&gt;&lt;h3&gt;Why all the trouble?&lt;/h3&gt;&lt;p&gt;We are in an interesting place in web-history right now.  Back in the 90's the web was a mess - sites were optimized for specific browsers, animated gif's were everywhere, and my god, the &amp;lt;blink&amp;gt; tags! During the 00's things were getting better, standards and practices started emerging but it took the better part of the decade get where we are now. As websites start blurring the line between pages and applications we have a responsibility to gather as a community and craft the best code we can. Semantics give meaning while removing ambiguity - cleaner and easier maintained code, better accessibility.&lt;/p&gt;&lt;p&gt;Above all else - using clear, concise markup shows professionalism.  Just like the furniture maker who actually takes time to finish the underside of the cabinet drawers, a craftsman takes pride in every aspect of his or her work.  Take pride in your HTML, take pride in your CSS, and take pride in your markup. If not for anything else just create something you can be proud of.&lt;/p&gt;</content>
 </entry>
 
 
</feed>